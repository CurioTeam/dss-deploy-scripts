#!/usr/bin/env bash

# shellcheck source=lib/common.sh
. "$LIB_DIR/common.sh"

# Deploy Values or Medians
tokens=$(jq -r ".tokens | keys_unsorted[]" "$CONFIG_FILE")
for token in $tokens; do
    pipAddr=$(jq -r ".tokens.${token} | .pip | values" "$CONFIG_FILE")
    if [[ "$pipAddr" == "" ]]; then
        type=$(jq -r ".tokens.${token} | .pipDeploy | .type | values" "$CONFIG_FILE")
        # Deploy Medianizer as Feed
        if [[ "$type" == "median" ]]; then
            contract=$(dappCreate testchain-medians "Median${token}USD")
            eval "export PIP_${token}=${contract}"
            signers=$(jq -r ".tokens.${token} | .pipDeploy | .signers | .[]" "$CONFIG_FILE")
            # Approve oracle price feed providers
            allsigners=()
            for signer in $signers; do
                allsigners+=("${signer#0x}")
            done
            seth send "$(eval echo "\$PIP_${token}")" 'lift(address[] memory)' "[$(join "${allsigners[@]}")]"
            # Set quorum for Medianizer
            seth send "$(eval echo "\$PIP_${token}")" 'setBar(uint256)' "$(seth --to-uint256 3)"
        fi
        # Deploy DSValue as Feed
        if [[ "${type}" == "value" ]]; then
            contract=$(dappCreate osm DSValue)
            eval "export PIP_${token}=${contract}"
        fi
        log "PIP_${token} deployed"
    else
        eval "export PIP_${token}=${pipAddr}"
        copy osm
        copy testchain-medians
    fi
    eval "export VAL_${token}=\$PIP_${token}"
done

# Deploy Multicall
MULTICALL=$(dappCreate multicall Multicall)
log "multicall deployed"

# Deploy Token Faucet
FAUCET=$(jq -r ".faucet | values" "$CONFIG_FILE")
if [[ -z "$FAUCET" ]]; then
    FAUCET=$(dappCreate token-faucet RestrictedTokenFaucet "$(seth --to-uint256 "$(seth --to-wei 50 ETH)")")
    if [[ "$DEPLOY_RESTRICTED_FAUCET" == "no" ]]; then
        seth send "$FAUCET" 'hope(address)' "0x0000000000000000000000000000000000000000"
    fi
    log "token faucet deployed"
fi

# Deploy ProxyRegistry
PROXY_REGISTRY=$(jq -r ".proxyRegistry | values" "$CONFIG_FILE")
if [[ -z "$PROXY_REGISTRY" ]]; then
    PROXY_FACTORY=$(dappCreate dss-proxy-actions DSProxyFactory)
    PROXY_REGISTRY=$(dappCreate dss-proxy-actions ProxyRegistry "$PROXY_FACTORY")
    log "proxy-registry deployed"
else
    PROXY_FACTORY=$(seth storage "$PROXY_REGISTRY" 1)
    PROXY_FACTORY=0x${PROXY_FACTORY:26:66}
fi

# Deploy Fabs
# shellcheck source=/dev/null
"$LIBEXEC_DIR/dss/deploy-fab"
# shellcheck source=/dev/null
. "$OUT_DIR/load-fabs-addr-temp"
rm "$OUT_DIR/load-fabs-addr-temp"
log "fabs deployed"

# Set the pause delay to 0 in order to make the needed initial configurations
export MCD_PAUSE_DELAY=0

# Make sure there is not $MCD_ADM set, so a temporary roles is created as authority (to handle variables set up easier)
unset MCD_ADM

MCD_GOV=$(jq -r ".gov | values" "$CONFIG_FILE")
if [[ -z "$MCD_GOV" ]]; then
    # It means the GOV token will be created now in the next deployment script call, then we can send funds to the Faucet and set permissions to FLOP
    newGovToken=true
else
    newGovToken=false
    export MCD_GOV
fi

MCD_ESM_MIN="$(seth --to-uint256 "$(seth --to-wei "$(jq -r ".esm_min | values" "$CONFIG_FILE")" "eth")")"
export MCD_ESM_MIN
MCD_ESM_PIT="$(jq -r ".esm_pit | values" "$CONFIG_FILE")"
export MCD_ESM_PIT

# Deploy MCD Core Contratcs
# shellcheck source=/dev/null
"$LIBEXEC_DIR/dss/deploy-core"
# shellcheck source=/dev/null
. "$OUT_DIR/load-core-addr-temp"
rm "$OUT_DIR/load-core-addr-temp"
log "core deployed"

# Mint Gov Token, send to the Faucet and set permissions if a new token
if [[ "$newGovToken" == true ]]; then
    seth send "$MCD_GOV" 'mint(address,uint256)' "$FAUCET" "$(seth --to-uint256 "$(seth --to-wei 1000000 ETH)")"
    seth send "$FAUCET" 'gulp(address)' "$MCD_GOV"

    # Use custom authority for the new GOV token
    GOV_GUARD=$(dappCreate mkr-authority MkrAuthority)

    # Set GOV_GUARD as authority of MCD_GOV
    seth send "$MCD_GOV" 'setAuthority(address)' "$GOV_GUARD"

    # Allow Flop to mint Gov token
    seth send "$GOV_GUARD" 'rely(address)' "$MCD_FLOP" 
    log "gov deployed"
fi

# Deploy Collaterals
tokens=$(jq -r ".tokens | keys_unsorted[]" "$CONFIG_FILE")
for token in $tokens; do
    ilks=$(jq -r ".tokens.${token}.ilks | keys_unsorted[]" "$CONFIG_FILE")

    gemAddr=$(jq -r ".tokens.${token} | .gem | values" "$CONFIG_FILE")
    eval "export ${token}=${gemAddr}"

    for ilk in $ilks; do
        # shellcheck source=/dev/null
        "$LIBEXEC_DIR/dss/deploy-ilk-$(echo "$token" | tr '[:upper:]' '[:lower:]')" "$ilk"
        # shellcheck source=/dev/null
        . "$OUT_DIR/load-ilk-addr-temp"
        rm "$OUT_DIR/load-ilk-addr-temp"
        log "${token}-${ilk} deployed"

        # If the ilk token was created by the previous deployment script call (new token) and it is not ETH, then we can send funds to the Faucet
        if [[ "$token" != "ETH" && "$gemAddr" == "" ]]; then
            seth send "$(eval echo "\$$token")" 'transfer(address,uint256)' "$FAUCET" "$(seth --to-uint256 "$(seth --to-wei 999000 ETH)")"
        fi
        export SKIP_BUILD=true
    done
done

# Deploy Proxy Actions
PROXY_ACTIONS=$(dappCreate dss-proxy-actions-optimized DssProxyActions)
PROXY_ACTIONS_END=$(dappCreate dss-proxy-actions-optimized DssProxyActionsEnd)
PROXY_ACTIONS_DSR=$(dappCreate dss-proxy-actions-optimized DssProxyActionsDsr)
log "proxy actions deployed"

# Deploy CdpManager
CDP_MANAGER=$(dappCreate dss-proxy-actions DssCdpManager "$MCD_VAT")
log "manager deployed"
GET_CDPS=$(dappCreate dss-proxy-actions GetCdps)
log "getCdps deployed"

SAI_TUB=$(jq -r ".migration.tub | values" "$CONFIG_FILE")
ethAdapterAddr="$(eval echo "\$$(jq -r ".migration.ethAdapterVarName | values" "$CONFIG_FILE")")"
if [[ -n "$SAI_TUB" && -n "$ethAdapterAddr" ]]; then
    SAI="0x$(seth call "$SAI_TUB" 'sai()(address)')"
    export SAI

    # shellcheck source=/dev/null
    "$LIBEXEC_DIR/dss/deploy-ilk-sai"
    # shellcheck source=/dev/null
    . "$OUT_DIR/load-ilk-addr-temp"
    rm "$OUT_DIR/load-ilk-addr-temp"
    log "SAI deployed"

    # Set SAI price = 1 USD
    seth send "$PIP_SAI" 'poke(bytes32)' "$(seth --to-uint256 "$(seth --to-wei 1 ETH)")"

    # Set SAI pip authority to Proxy Pause
    seth send "$PIP_SAI" 'setOwner(address)' "$MCD_PAUSE_PROXY"

    # Deploy ScdMcdMigration
    MIGRATION=$(dappCreate scd-mcd-migration ScdMcdMigration "$SAI_TUB" "$CDP_MANAGER" "$MCD_JOIN_SAI" "$ethAdapterAddr" "$MCD_JOIN_DAI")

    # Rely Migration contract to access the SAI Adapter
    seth send "$MCD_JOIN_SAI" 'rely(address)' "$MIGRATION"
    # Rely Pause Proxy contract to access the SAI Adapter
    seth send "$MCD_JOIN_SAI" 'rely(address)' "$MCD_PAUSE_PROXY"
    # Deny deployer to access the SAI Adapter
    seth send "$MCD_JOIN_SAI" 'deny(address)' "$ETH_FROM"

    seth send "$MCD_DEPLOY" 'releaseAuthFlip(bytes32)' "$(seth --to-bytes32 "$(seth --from-ascii "SAI")")"
    log "auth removed for SAI"

    # Deploy MigrationProxyActions to use migrate function through DSProxy
    MIGRATION_PROXY_ACTIONS=$(dappCreate scd-mcd-migration MigrationProxyActions)
fi

# As all initial collaterals were deployed, we can remove authority of the deployment contract from the core contracts
seth send "$MCD_DEPLOY" 'releaseAuth()'
log "general auth removed"
for token in $tokens; do
    ilks=$(jq -r ".tokens.${token}.ilks | keys_unsorted[]" "$CONFIG_FILE")
    for ilk in $ilks; do
        # Rely Pause Proxy contract to access the Adapter
        seth send "$(eval echo "\$MCD_JOIN_${token}_${ilk}")" 'rely(address)' "$MCD_PAUSE_PROXY"
        # Deny deployer to access the Adapter
        seth send "$(eval echo "\$MCD_JOIN_${token}_${ilk}")" 'deny(address)' "$ETH_FROM"

        seth send "$MCD_DEPLOY" 'releaseAuthFlip(bytes32)' "$(seth --to-bytes32 "$(seth --from-ascii "${token}-${ilk}")")"
    done

    log "auth removed for ${token}-${ilk}"
done

# Deploy GovActions - Library functions for the Pause
MCD_GOV_ACTIONS=$(dappCreate dss-deploy GovActions)
log "gov actions deployed"

unset SKIP_BUILD

# Deploy Pause Proxy Actions (support contract for executing initial set up of the dss system)
PROXY_PAUSE_ACTIONS=$(dappCreate dss-deploy-pause-proxy-actions DssDeployPauseProxyActions)
log "pause actions deployed"

# Get a proxy for the deployer address (create if didn't previously exist)
PROXY_DEPLOYER=0x$(seth call "$PROXY_REGISTRY" 'proxies(address)(address)' "$ETH_FROM")
if [[ "$PROXY_DEPLOYER" == "0x0000000000000000000000000000000000000000" ]]; then
    seth send "$PROXY_REGISTRY" 'build()'
    log "proxy deployer deployed"
    PROXY_DEPLOYER=0x"$(seth call "$PROXY_REGISTRY" 'proxies(address)(address)' "$ETH_FROM")"
fi

# Set the proxy address as root of the roles (in order to be able to do all the variables set up)
seth send "$MCD_ADM" 'setRootUser(address,bool)' "$PROXY_DEPLOYER" true

# Deploy chief as new $MCD_ADM if there isn't an authority in the config file
MCD_ADM=$(jq -r ".authority | values" "$CONFIG_FILE")
if [[ -z "$MCD_ADM" ]]; then
    MCD_IOU=$(dappCreate vote-proxy DSToken "$(seth --to-bytes32 "$(seth --from-ascii "IOU")")")
    log "IOU token deployed"

    MCD_ADM=$(dappCreate vote-proxy DSChief "$MCD_GOV" "$MCD_IOU" 5)
    seth send "$MCD_IOU" 'setOwner(address)' "${MCD_ADM}"
    log "chief deployed"

    # Deploy Vote Proxy Factory
    VOTE_PROXY_FACTORY=$(dappCreate vote-proxy VoteProxyFactory "$MCD_ADM")
    log "vote proxy factory deployed"
else
    copy vote-proxy
fi

if [[ -n "$GOV_GUARD" ]]; then
    seth send "$GOV_GUARD" 'setRoot(address)' "$MCD_PAUSE_PROXY"
fi

for token in $tokens; do
    ILKS_VARS+=",
    \"${token}\": \"$(eval echo "\$${token}")\""
    if [[ "$(eval echo "\$VAL_${token}")" != "" ]]; then
    ILKS_VARS+=",
    \"VAL_${token}\": \"$(eval echo "\$VAL_${token}")\""
    fi
    ILKS_VARS+=",
    \"PIP_${token}\": \"$(eval echo "\$PIP_${token}")\""
    ilks=$(jq -r ".tokens.${token}.ilks | keys_unsorted[]" "$CONFIG_FILE")
    for ilk in $ilks; do
    ILKS_VARS+=",
    \"MCD_JOIN_${token}_${ilk}\": \"$(eval echo "\$MCD_JOIN_${token}_${ilk}")\""
    ILKS_VARS+=",
    \"MCD_FLIP_${token}_${ilk}\": \"$(eval echo "\$MCD_FLIP_${token}_${ilk}")\""
    done
done

if [[ -n "$MIGRATION" ]]; then
    ILKS_VARS+=",
    \"SAI\": \"$SAI\""
    ILKS_VARS+=",
    \"PIP_SAI\": \"$PIP_SAI\""
    ILKS_VARS+=",
    \"MCD_JOIN_SAI\": \"$MCD_JOIN_SAI\""
    ILKS_VARS+=",
    \"MCD_FLIP_SAI\": \"$MCD_FLIP_SAI\""

    MIGRATION_VARS=",
    \"SAI_TUB\": \"$SAI_TUB\""
    MIGRATION_VARS+=",
    \"MIGRATION\": \"$MIGRATION\""
    MIGRATION_VARS+=",
    \"MIGRATION_PROXY_ACTIONS\": \"$MIGRATION_PROXY_ACTIONS\""
fi

if [[ -n $GOV_GUARD ]]; then
    GOV_GUARD_VAR=",
    \"GOV_GUARD\": \"$GOV_GUARD\""
fi
if [[ -n $MCD_IOU ]]; then
    MCD_IOU_VAR=",
    \"MCD_IOU\": \"$MCD_IOU\""
fi
if [[ -n $VOTE_PROXY_FACTORY ]]; then
    VOTE_PROXY_FACTORY_VAR=",
    \"VOTE_PROXY_FACTORY\": \"$VOTE_PROXY_FACTORY\""
fi

# Generate addresses.json file
cat > "$OUT_DIR"/addresses.json <<EOF
{
    "DEPLOYER": "$ETH_FROM",
    "MULTICALL": "$MULTICALL",
    "FAUCET": "$FAUCET",
    "MCD_DEPLOY": "$MCD_DEPLOY",
    "MCD_GOV": "$MCD_GOV"$GOV_GUARD_VAR$MCD_IOU_VAR,
    "MCD_ADM": "$MCD_ADM"$VOTE_PROXY_FACTORY_VAR,
    "MCD_VAT": "$MCD_VAT",
    "MCD_JUG": "$MCD_JUG",
    "MCD_CAT": "$MCD_CAT",
    "MCD_VOW": "$MCD_VOW",
    "MCD_JOIN_DAI": "$MCD_JOIN_DAI",
    "MCD_FLAP": "$MCD_FLAP",
    "MCD_FLOP": "$MCD_FLOP",
    "MCD_PAUSE": "$MCD_PAUSE",
    "MCD_PAUSE_PROXY": "$MCD_PAUSE_PROXY",
    "MCD_GOV_ACTIONS": "$MCD_GOV_ACTIONS",
    "MCD_DAI": "$MCD_DAI",
    "MCD_SPOT": "$MCD_SPOT",
    "MCD_POT": "$MCD_POT",
    "MCD_END": "$MCD_END",
    "MCD_ESM": "$MCD_ESM",
    "PROXY_ACTIONS": "$PROXY_ACTIONS",
    "PROXY_ACTIONS_END": "$PROXY_ACTIONS_END",
    "PROXY_ACTIONS_DSR": "$PROXY_ACTIONS_DSR",
    "CDP_MANAGER": "$CDP_MANAGER",
    "GET_CDPS": "$GET_CDPS",
    "PROXY_FACTORY": "$PROXY_FACTORY",
    "PROXY_REGISTRY": "$PROXY_REGISTRY"$ILKS_VARS,
    "PROXY_PAUSE_ACTIONS": "$PROXY_PAUSE_ACTIONS",
    "PROXY_DEPLOYER": "$PROXY_DEPLOYER"$MIGRATION_VARS
}
EOF

"$LIBEXEC_DIR"/setters/set-vat-line

"$LIBEXEC_DIR"/setters/set-vow-wait

"$LIBEXEC_DIR"/setters/set-vow-bump

"$LIBEXEC_DIR"/setters/set-vow-dump

"$LIBEXEC_DIR"/setters/set-vow-sump

"$LIBEXEC_DIR"/setters/set-vow-hump

"$LIBEXEC_DIR"/setters/set-jug-base

"$LIBEXEC_DIR"/setters/set-pot-dsr

"$LIBEXEC_DIR"/setters/set-end-wait

"$LIBEXEC_DIR"/setters/set-beg "flap"

"$LIBEXEC_DIR"/setters/set-ttl "flap"

"$LIBEXEC_DIR"/setters/set-tau "flap"

"$LIBEXEC_DIR"/setters/set-beg "flop"

"$LIBEXEC_DIR"/setters/set-flop-pad

"$LIBEXEC_DIR"/setters/set-ttl "flop"

"$LIBEXEC_DIR"/setters/set-tau "flop"

"$LIBEXEC_DIR"/setters/set-ilks-price

"$LIBEXEC_DIR"/setters/set-ilks-pip-whitelist

"$LIBEXEC_DIR"/setters/set-ilks-mat

"$LIBEXEC_DIR"/setters/set-ilks-line

"$LIBEXEC_DIR"/setters/set-ilks-dust

"$LIBEXEC_DIR"/setters/set-ilks-duty

"$LIBEXEC_DIR"/setters/set-ilks-spotter-poke

"$LIBEXEC_DIR"/setters/set-ilks-chop

"$LIBEXEC_DIR"/setters/set-ilks-lump

"$LIBEXEC_DIR"/setters/set-ilks-beg

"$LIBEXEC_DIR"/setters/set-ilks-ttl

"$LIBEXEC_DIR"/setters/set-ilks-tau

if [[ -f "$CASE" ]]; then
    "$CASE"
fi

"$LIBEXEC_DIR"/setters/set-ilks-osm

"$LIBEXEC_DIR"/setters/set-pause-auth-delay
