#!/usr/bin/env bash

# shellcheck source=lib/common.sh
. "${LIB_DIR:-$(cd "${0%/*}/../lib"&&pwd)}/common.sh"

# Get config variables
CONFIG_FILE="$OUT_DIR/config.json"
# Get addresses
loadAddresses

tokens=$(jq -r ".tokens | keys_unsorted[]" "$CONFIG_FILE")
for token in $tokens; do
    addr=$(jq -r ".tokens.${token} | .pip | .addr | values" "$CONFIG_FILE")
    if [[ "$addr" == "" ]]; then
        osm_delay=$(jq -r ".tokens.${token} | .pip | .osmDelay" "$CONFIG_FILE")
        if [[ "$osm_delay" -gt 0 ]]; then
            # Deploy OSM
            eval "export PIP_${token}=$(dappCreate osm OSM "$(eval echo "\$VAL_${token}")")"
            # Set OSM delay
            seth send "$(eval echo "\$PIP_${token}")" 'step(uint16)' "$osm_delay"
            # Whitelist OSM in Medianizer (skip if source is DSValue)
            [[ "$type" == "median" ]] && seth send "$(eval echo "\$VAL_${token}")" 'kiss(address)' "$(eval echo "\$PIP_${token}")"
            ilks=$(jq -r ".tokens.${token}.ilks | keys_unsorted[]" "$CONFIG_FILE")
            # Whithelist Spotter in OSM
            seth send "$(eval echo "\$PIP_${token}")" 'kiss(address)' "$MCD_SPOT"
            for ilk in $ilks; do
                # Set osm in spotter
                calldata="$(seth calldata 'file(address,address,address,bytes32,address)' "$MCD_PAUSE" "$MCD_GOV_ACTIONS" "$MCD_SPOT" "$(seth --to-bytes32 "$(seth --from-ascii "${token}-${ilk}")")" "$(eval echo "\$PIP_${token}")")"
                seth send "$PROXY_DEPLOYER" 'execute(address,bytes memory)' "$PROXY_PAUSE_ACTIONS" "$calldata"
            done
        fi
    fi
done

for token in $tokens; do
addAddresses <<EOF
{
    "PIP_${token}": "$(eval echo "\$PIP_${token}")"
}
EOF
done

echo "SET ILKS OSM COMPLETED SUCCESSFULLY"
