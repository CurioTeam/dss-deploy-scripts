#!/usr/bin/env bash
set -ex

export ETH_GAS=${ETH_GAS:-"7000000"}
unset SOLC_FLAGS

# Remove ./out folder
rm -rf ./out

# Deploy Guard for Gov and IOU tokens
cd contracts/ds-guard
dapp --use solc:0.5.0 build
MCD_GOV_GUARD=$(dapp create DSGuard)
test -z $MCD_GOV_GUARD && exit 1

# Deploy Gov token and Chief (no solc optimization)
cd ../ds-chief
dapp --use solc:0.5.0 build
export MCD_GOV=$(dapp create DSToken $(seth --to-bytes32 $(seth --from-ascii "MKR")))
test -z $MCD_GOV && exit 1
IOU=$(dapp create DSToken $(seth --to-bytes32 $(seth --from-ascii "IOU")))
test -z $IOU && exit 1
TX=$(seth send $MCD_GOV 'setAuthority(address)' $MCD_GOV_GUARD --async)
test $(seth --field <<<"$(seth receipt $TX)" status) = 1
TX=$(seth send $IOU 'setAuthority(address)' $MCD_GOV_GUARD --async)
test $(seth --field <<<"$(seth receipt $TX)" status) = 1
export MCD_ADM=$(dapp create DSChief $MCD_GOV $IOU 5)
test -z $MCD_ADM && exit 1
TX=$(seth send $MCD_GOV_GUARD 'permit(address,address,bytes32)' $MCD_ADM $IOU $(seth --to-bytes32  $(seth sig 'mint(address,uint256)')) --async)
test $(seth --field <<<"$(seth receipt $TX)" status) = 1
TX=$(seth send $MCD_GOV_GUARD 'permit(address,address,bytes32)' $MCD_ADM $IOU $(seth --to-bytes32  $(seth sig 'burn(address,uint256)')) --async)
test $(seth --field <<<"$(seth receipt $TX)" status) = 1
TX=$(seth send $MCD_GOV 'mint(uint256)' $(seth --to-uint256 $(seth --to-wei 1000000 ETH)) --async)
test $(seth --field <<<"$(seth receipt $TX)" status) = 1
TX=$(seth send $MCD_GOV 'approve(address,uint256)' $MCD_ADM 1 --async)
test $(seth --field <<<"$(seth receipt $TX)" status) = 1
TX=$(seth send $MCD_ADM 'lock(uint256)' 1 --async)
test $(seth --field <<<"$(seth receipt $TX)" status) = 1
TX=$(seth send $MCD_ADM 'vote(address[])' [${ETH_FROM:2:42}] --async)
test $(seth --field <<<"$(seth receipt $TX)" status) = 1
TX=$(seth send $MCD_ADM 'lift(address)' $ETH_FROM --async)
test $(seth --field <<<"$(seth receipt $TX)" status) = 1

# Deploy OSM (no solc optimization)
cd ../ds-value
dapp --use solc:0.5.0 build
VAL_ETH=$(dapp create DSValue)
test -z $VAL_ETH && exit 1
VAL_REP=$(dapp create DSValue)
test -z $VAL_REP && exit 1
cd ../osm
dapp --use solc:0.5.0 build
export PIP_ETH=$(dapp create osm $VAL_ETH)
test -z $PIP_ETH && exit 1
export PIP_REP=$(dapp create osm $VAL_REP)
test -z $PIP_REP && exit 1

# Deploy ProxyRegistry (no solc optimization)
cd ../proxy-registry
dapp --use solc:0.5.0 build
PROXY_FACTORY=$(dapp create DSProxyFactory)
test -z $PROXY_FACTORY && exit 1
PROXY_REGISTRY=$(dapp create ProxyRegistry $PROXY_FACTORY)
test -z $PROXY_REGISTRY && exit 1

cd ../dss-proxy-actions

SCRIPT_DIR=lib/dss-cdp-manager/lib/dss-deploy/bin/

# Deploy Fabs (no solc optimization)
"$SCRIPT_DIR/deploy-fab"
. load-fab-unknown
rm load-fab-unknown

# Deploy Proxy Actions (no solc optimization)
PROXY_ACTIONS=$(dapp create DssProxyActions)
test -z $PROXY_ACTIONS && exit 1

# Deploy CdpManager (no solc optimization)
CDP_MANAGER=$(dapp create DssCdpManager)
test -z $CDP_MANAGER && exit 1

# Deploy MCD Core Contratcs (solc optimized)
"$SCRIPT_DIR/deploy"
. load-mcd-unknown
rm load-mcd-unknown

# Deploy ETH Collateral (no solc optimization)
"$SCRIPT_DIR/deploy-eth"
. load-ilk-eth-unknown
rm load-ilk-eth-unknown

export SKIP_BUILD=true

# Deploy REP Collateral (no solc optimization)
"$SCRIPT_DIR/deploy-rep"
. load-ilk-rep-unknown
rm load-ilk-rep-unknown

# Deploy MomLib (no solc optimization)
MCD_MOM_LIB=$(dapp create MomLib)
test -z $MCD_MOM_LIB && exit 1

# Allow Flop to mint Gov token
TX=$(seth send $MCD_GOV_GUARD 'permit(address,address,bytes32)' $MCD_FLOP $MCD_GOV $(seth --to-bytes32  $(seth sig 'mint(address,uint256)')) --async)
test $(seth --field <<<"$(seth receipt $TX)" status) = 1

# Mint initial supply REP
TX=$(seth send $REP 'mint(address,uint256)' $ETH_FROM $(seth --to-uint256 $(seth --to-wei 1000000 ETH)) --async)
test $(seth --field <<<"$(seth receipt $TX)" status) = 1

# Copy abi files
cd ../../
mkdir -p ./out/abi
cp ./contracts/ds-guard/out/DSGuard.abi ./out/abi
cp ./contracts/ds-chief/out/DSToken.abi ./out/abi
cp ./contracts/ds-chief/out/DSChief.abi ./out/abi
cp ./contracts/osm/out/osm.abi ./out/abi
cp ./contracts/dss-proxy-actions/out/DssProxyActions.abi ./out/abi
cp ./contracts/dss-proxy-actions/out/DssCdpManager.abi ./out/abi
cp ./contracts/dss-proxy-actions/out/DssDeploy.abi ./out/abi
cp ./contracts/dss-proxy-actions/out/Vat.abi ./out/abi
cp ./contracts/dss-proxy-actions/out/Pit.abi ./out/abi
cp ./contracts/dss-proxy-actions/out/Drip.abi ./out/abi
cp ./contracts/dss-proxy-actions/out/Cat.abi ./out/abi
cp ./contracts/dss-proxy-actions/out/Vow.abi ./out/abi
cp ./contracts/dss-proxy-actions/out/Flipper.abi ./out/abi
cp ./contracts/dss-proxy-actions/out/Flopper.abi ./out/abi
cp ./contracts/dss-proxy-actions/out/Flapper.abi ./out/abi
cp ./contracts/dss-proxy-actions/out/DaiJoin.abi ./out/abi
cp ./contracts/dss-proxy-actions/out/ETHJoin.abi ./out/abi
cp ./contracts/dss-proxy-actions/out/GemJoin.abi ./out/abi
cp ./contracts/dss-proxy-actions/out/DaiMove.abi ./out/abi
cp ./contracts/dss-proxy-actions/out/GemMove.abi ./out/abi
cp ./contracts/dss-proxy-actions/out/Spotter.abi ./out/abi
cp ./contracts/proxy-registry/out/DSProxy.abi ./out/abi
cp ./contracts/proxy-registry/out/DSProxyFactory.abi ./out/abi
cp ./contracts/proxy-registry/out/ProxyRegistry.abi ./out/abi

# Generate addresses.json file
cat > ./out/addresses.json << EOF
{
    "MCD_DEPLOY": "$MCD_DEPLOY",
    "MCD_GOV": "$MCD_GOV",
    "MCD_GOV_GUARD": "$MCD_GOV_GUARD",
    "MCD_ADM": "$MCD_ADM",
    "MCD_VAT": "$MCD_VAT",
    "MCD_PIT": "$MCD_PIT",
    "MCD_DRIP": "$MCD_DRIP",
    "MCD_CAT": "$MCD_CAT",
    "MCD_VOW": "$MCD_VOW",
    "MCD_JOIN_DAI": "$MCD_JOIN_DAI",
    "MCD_MOVE_DAI": "$MCD_MOVE_DAI",
    "MCD_FLAP": "$MCD_FLAP",
    "MCD_FLOP": "$MCD_FLOP",
    "MCD_MOM": "$MCD_MOM",
    "MCD_MOM_LIB": "$MCD_MOM_LIB",
    "MCD_DAI": "$MCD_DAI",
    "MCD_DAI_GUARD": "$MCD_DAI_GUARD",
    "PROXY_ACTIONS": "$PROXY_ACTIONS",
    "CDP_MANAGER": "$CDP_MANAGER",
    "PROXY_FACTORY": "$PROXY_FACTORY",
    "PROXY_REGISTRY": "$PROXY_REGISTRY",
    "PIP_ETH": "$PIP_ETH",
    "MCD_JOIN_ETH": "$MCD_JOIN_ETH",
    "MCD_MOVE_ETH": "$MCD_MOVE_ETH",
    "MCD_FLIP_ETH": "$MCD_FLIP_ETH",
    "MCD_SPOT_ETH": "$MCD_SPOT_ETH",
    "PIP_REP": "$PIP_REP",
    "REP": "$REP",
    "MCD_JOIN_REP": "$MCD_JOIN_REP",
    "MCD_MOVE_REP": "$MCD_MOVE_REP",
    "MCD_FLIP_REP": "$MCD_FLIP_REP",
    "MCD_SPOT_REP": "$MCD_SPOT_REP"
}
EOF

echo "STEP 1 COMPLETED SUCCESSFULLY"
